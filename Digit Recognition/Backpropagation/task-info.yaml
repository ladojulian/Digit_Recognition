type: edu
custom_name: stage6
files:
- name: src/recognition/Main.java
  visible: true
  text: |
    package recognition;
    import java.util.*;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DigitRecognitionTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import recognition.Main;

    import java.util.*;
    import java.util.List;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        Clue(int ans) {
            answer = Integer.toString(ans);
        }
    }

    public class DigitRecognitionTest extends StageTest<Clue> {
        public DigitRecognitionTest() {
            super(Main.class);
        }

        static String filename = "testfile.txt";


        static String zero = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t56\t105\t220\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t166\t233\t253\t253\t253\t236\t209\t209\t209\t77\t18\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t172\t8\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t57\t238\t253\t253\t253\t253\t253\t254\t253\t253\t253\t253\t253\t119\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t14\t238\t253\t253\t253\t253\t253\t253\t179\t196\t253\t253\t253\t253\t238\t12\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t33\t253\t253\t253\t253\t253\t248\t134\t0\t18\t83\t237\t253\t253\t253\t14\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t164\t253\t253\t253\t253\t253\t128\t0\t0\t0\t0\t57\t119\t214\t253\t94\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t57\t248\t253\t253\t253\t126\t14\t4\t0\t0\t0\t0\t0\t0\t179\t253\t248\t56\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t175\t253\t253\t240\t190\t28\t0\t0\t0\t0\t0\t0\t0\t0\t179\t253\t253\t173\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t92\t253\t253\t208\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t211\t254\t254\t179\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t135\t255\t209\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t209\t253\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t253\t208\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t209\t253\t253\t178\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t142\t253\t208\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t209\t253\t253\t214\t35\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t253\t253\t208\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t165\t253\t253\t253\t215\t36\t0\t0\t0\t0\t0\t0\t0\t0\t163\t253\t253\t164\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t18\t172\t253\t253\t253\t214\t127\t7\t0\t0\t0\t0\t0\t72\t232\t253\t171\t17\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t8\t182\t253\t253\t253\t253\t162\t56\t0\t0\t0\t64\t240\t253\t253\t14\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t7\t173\t253\t253\t253\t253\t245\t241\t239\t239\t246\t253\t225\t14\t1\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t18\t59\t138\t224\t253\t253\t254\t253\t253\t253\t240\t96\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t104\t192\t255\t253\t253\t182\t73\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String one = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t134\t240\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t255\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t158\t254\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t183\t239\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t239\t239\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t238\t238\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t52\t250\t173\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t253\t138\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t143\t254\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t80\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t142\t253\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t248\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String two = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t107\t226\t255\t254\t254\t254\t135\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t7\t75\t157\t228\t254\t254\t254\t254\t254\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t93\t254\t254\t254\t254\t189\t108\t67\t96\t247\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t56\t251\t254\t234\t139\t20\t2\t0\t0\t18\t239\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t49\t192\t211\t25\t0\t0\t0\t0\t0\t77\t254\t244\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t110\t254\t175\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t71\t251\t245\t45\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t154\t254\t130\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t102\t239\t229\t42\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t243\t251\t108\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t239\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t66\t240\t254\t192\t16\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t239\t254\t240\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t1\t129\t254\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t88\t254\t254\t171\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t53\t241\t254\t254\t243\t230\t230\t189\t106\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t2\t170\t254\t254\t254\t254\t254\t254\t254\t254\t206\t25\t2\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t254\t254\t254\t232\t186\t241\t254\t254\t254\t194\t77\t16\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t92\t254\t254\t242\t128\t44\t19\t0\t23\t58\t140\t234\t254\t254\t232\t81\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t23\t62\t62\t41\t0\t0\t0\t0\t0\t0\t0\t30\t157\t208\t250\t22\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";


        static String three = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t31\t8\t23\t156\t194\t186\t254\t254\t255\t163\t41\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t253\t253\t253\t254\t253\t241\t69\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t68\t193\t179\t78\t78\t78\t186\t253\t253\t226\t18\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t5\t3\t0\t0\t0\t12\t113\t253\t253\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t58\t253\t253\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t37\t186\t254\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t95\t201\t253\t253\t234\t31\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t79\t109\t187\t253\t254\t253\t228\t111\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t201\t253\t253\t253\t253\t254\t253\t247\t219\t62\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t253\t253\t162\t193\t254\t253\t253\t253\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t183\t254\t254\t255\t84\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t12\t54\t218\t254\t233\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t233\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t7\t159\t254\t233\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t253\t254\t195\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t121\t83\t0\t0\t0\t0\t0\t0\t49\t209\t254\t255\t39\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t195\t222\t26\t0\t0\t0\t13\t65\t196\t253\t253\t76\t6\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t128\t254\t217\t175\t86\t153\t224\t253\t253\t253\t192\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t45\t186\t253\t253\t253\t253\t254\t253\t240\t146\t5\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t103\t155\t245\t253\t231\t147\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String four = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t220\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t125\t225\t254\t249\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t255\t254\t246\t86\t0\t0\t0\t0\t0\t0\t93\t245\t149\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t164\t254\t249\t87\t0\t0\t0\t0\t0\t0\t93\t248\t254\t244\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t97\t245\t254\t175\t0\t0\t0\t0\t0\t0\t0\t182\t254\t254\t233\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t56\t234\t254\t204\t10\t0\t0\t0\t0\t0\t0\t9\t203\t254\t254\t111\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t190\t254\t254\t139\t0\t0\t0\t0\t0\t0\t6\t216\t254\t254\t222\t19\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t245\t254\t254\t229\t118\t63\t63\t63\t63\t123\t197\t254\t254\t249\t99\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t113\t253\t254\t254\t254\t254\t254\t254\t254\t254\t254\t254\t253\t101\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t73\t151\t217\t254\t254\t254\t254\t254\t254\t254\t254\t113\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t15\t58\t155\t155\t155\t194\t254\t254\t229\t15\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t117\t254\t254\t61\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t40\t242\t254\t224\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t249\t103\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t227\t254\t213\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t150\t254\t254\t68\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t214\t254\t187\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t59\t249\t254\t151\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t222\t254\t243\t40\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t140\t254\t159\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";


        static String five = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t170\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t56\t0\t0\t57\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t254\t253\t254\t253\t254\t253\t169\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t254\t253\t254\t253\t254\t253\t114\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t196\t83\t84\t83\t84\t83\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t169\t255\t253\t169\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t253\t251\t168\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t141\t253\t254\t253\t85\t28\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t114\t253\t251\t253\t251\t253\t196\t169\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t85\t253\t254\t253\t254\t253\t254\t253\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t85\t251\t253\t251\t253\t251\t253\t251\t253\t251\t253\t251\t225\t56\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t57\t168\t169\t168\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t57\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t168\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t29\t197\t254\t253\t169\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t197\t251\t253\t251\t56\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t85\t253\t169\t0\t0\t0\t0\t0\t29\t197\t254\t253\t254\t196\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t85\t251\t225\t168\t169\t168\t169\t168\t197\t251\t253\t251\t196\t28\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t57\t168\t254\t253\t254\t253\t254\t253\t254\t253\t226\t168\t114\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t139\t251\t253\t251\t253\t251\t196\t83\t56\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";


        static String six = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t255\t120\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t247\t254\t192\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t57\t249\t254\t254\t85\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t31\t220\t254\t254\t125\t1\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t23\t214\t254\t249\t114\t13\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t28\t191\t254\t254\t109\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t32\t219\t254\t251\t142\t1\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t254\t254\t188\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t69\t241\t254\t254\t79\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t240\t254\t254\t254\t242\t101\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t44\t249\t254\t243\t242\t254\t239\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t231\t254\t175\t25\t16\t156\t254\t240\t36\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t136\t254\t254\t86\t0\t0\t22\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t208\t9\t0\t0\t15\t254\t254\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t105\t0\t0\t0\t15\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t216\t254\t120\t0\t0\t0\t117\t254\t254\t52\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t176\t254\t242\t73\t0\t40\t243\t254\t236\t32\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t9\t208\t254\t247\t163\t214\t254\t254\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t184\t254\t254\t254\t252\t191\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t13\t141\t188\t235\t148\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String seven = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t175\t140\t17\t83\t41\t0\t0\t0\t0\t0\t132\t251\t49\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t99\t247\t254\t252\t254\t253\t238\t164\t154\t117\t201\t254\t254\t73\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t69\t246\t254\t254\t254\t191\t218\t254\t254\t254\t254\t254\t254\t187\t3\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t179\t254\t254\t173\t52\t2\t7\t85\t99\t99\t167\t254\t250\t55\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t67\t250\t254\t146\t2\t0\t0\t0\t0\t0\t0\t134\t254\t156\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t81\t254\t196\t16\t0\t0\t0\t0\t0\t0\t79\t250\t249\t56\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t8\t26\t11\t0\t0\t0\t0\t0\t0\t0\t136\t254\t155\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19\t231\t249\t58\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t127\t254\t153\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t65\t232\t235\t89\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t168\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t77\t247\t214\t10\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6\t174\t254\t133\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t125\t254\t228\t46\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t235\t254\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t144\t254\t216\t11\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t76\t247\t254\t125\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t146\t255\t234\t49\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t22\t238\t255\t120\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t120\t254\t237\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String eight = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t114\t196\t254\t254\t160\t7\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t170\t253\t249\t243\t165\t250\t205\t36\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t81\t214\t253\t195\t53\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t184\t253\t209\t16\t0\t0\t0\t169\t253\t173\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t21\t232\t253\t158\t0\t0\t0\t70\t227\t253\t144\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t3\t191\t253\t245\t67\t0\t19\t219\t253\t229\t37\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t84\t249\t253\t220\t87\t228\t253\t230\t47\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t129\t253\t253\t253\t253\t235\t77\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t10\t171\t253\t253\t253\t63\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t83\t228\t253\t253\t253\t118\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t226\t253\t190\t229\t253\t251\t70\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t201\t253\t170\t2\t4\t231\t253\t228\t19\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t121\t253\t174\t10\t0\t0\t49\t236\t253\t75\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t51\t246\t197\t38\t0\t0\t0\t0\t214\t253\t128\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t2\t93\t253\t159\t0\t0\t0\t0\t0\t214\t253\t129\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t0\t0\t214\t253\t90\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t0\t0\t1\t122\t251\t244\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t21\t253\t253\t69\t0\t34\t110\t191\t253\t253\t110\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t1\t121\t253\t247\t244\t248\t253\t253\t225\t119\t3\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t16\t195\t253\t253\t253\t234\t152\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        static String nine = "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t64\t163\t163\t247\t221\t247\t130\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t16\t139\t190\t249\t253\t254\t253\t253\t253\t253\t136\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t14\t196\t253\t253\t250\t216\t101\t36\t67\t253\t253\t135\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t98\t254\t253\t192\t69\t0\t0\t0\t108\t253\t207\t20\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t14\t232\t254\t233\t23\t0\t0\t0\t0\t159\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t19\t254\t255\t234\t49\t27\t0\t0\t94\t241\t254\t105\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t8\t173\t254\t253\t244\t235\t145\t145\t239\t253\t223\t31\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t185\t250\t253\t253\t253\t254\t253\t253\t99\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t50\t131\t144\t183\t254\t253\t185\t12\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t155\t254\t253\t127\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t38\t228\t255\t192\t13\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t8\t204\t253\t212\t14\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t159\t253\t253\t91\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t30\t233\t253\t207\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t210\t253\t253\t72\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t99\t254\t254\t209\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t247\t253\t253\t93\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t46\t254\t253\t221\t27\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t162\t254\t253\t55\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t148\t254\t233\t23\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n" +
            "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n";

        @Override
        public List<TestCase<Clue>> generate() {
            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String file : new String[]{zero, one, two, three, four, five, six, seven, eight, nine}) {
                tests.add(new TestCase<Clue>()
                    .setAttach(new Clue(i))
                    .setInput("3\n" + filename)
                    .addFile(filename, file)
                );
                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            List<String> lines = reply.lines().collect(Collectors.toList());
            String lastLine = lines.get(lines.size() - 1);

            String[] lastLineWords = lastLine.split("\\s+");

            List<String> foundedNumbers = new ArrayList<>();
            for (String word : lastLineWords) {
                if (word.matches("[0-9]+")) {
                    foundedNumbers.add(word);
                }
            }

            if (foundedNumbers.size() > 1) {
                String numbers = String.join(", ", foundedNumbers);
                return new CheckResult(false,
                    "Last line contains several numbers, " +
                        "you should output only one number.\n" +
                        "Numbers found: " + numbers);
            }

            if (foundedNumbers.size() == 0) {
                return new CheckResult(false,
                    "Last line in output " +
                        "doesn't contain any numbers.");
            }

            String founded = foundedNumbers.get(0);

            if (!founded.equals(clue.answer)) {
                return new CheckResult(false,
                    "Last line contains number " + founded + " " +
                        "but expected to contain number " + clue.answer);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/recognition/Matrix.java
  visible: true
  text: |
    package recognition;

    import java.io.Serializable;
    import java.util.Arrays;
    import java.util.Random;
    import java.util.function.UnaryOperator;

    public class Matrix implements Serializable {
        private final int rows;
        private final int columns;
        private final double[][] data;

        Matrix(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            data = new double[rows][columns];
        }
        Matrix(double[][] data) {
            this.data = data;
            this.rows = data.length;
            this.columns = data[0].length;
        }

        public Matrix(Matrix other) {
            rows = other.rows;
            columns = other.columns;
            data = new double[rows][];
            for (int i = 0; i < rows; i++) {
                data[i] = Arrays.copyOf(other.data[i], other.data[i].length);
            }
        }

        static public Matrix getMatrix(int rows, int columns, int element) {
            assert rows > 0 && columns > 0;
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < result.getRows(); i++) {
                Arrays.fill(result.data[i], element);
            }
            return result;
        }

        public static void fillRandom(Matrix matrix) {
            Random random = new Random();
            for (int i = 0; i < matrix.rows; i++) {
                for (int j = 0; j < matrix.columns; j++) {
                    matrix.data[i][j] = random.nextGaussian();
                }
            }
        }

        public double getAt(int row, int column) {
            assert row < data.length && column < data[row].length;
            return data[row][column];
        }

        public void setAt(int row, int column, double value) {
            assert row < data.length && column < data[row].length;
            data[row][column] = value;
        }

        public void setRow(int rowSet, Matrix other, int rowGet) {
            assert this.data[rowSet].length == other.data[rowGet].length;
            this.data[rowSet] = Arrays.copyOf(other.data[rowGet], other.data[rowGet].length);
        }

        public Matrix addRow(double value) {
            double[] row = new double[columns];
            Arrays.fill(row, value);
            return addRow(row);
        }

        public Matrix addRow(double[] row) {
            return addRow(row, getRows());
        }

        public Matrix addRow(double[] row, int position) {
            assert position <= rows && row.length == columns;
            Matrix result = new Matrix(getRows() + 1, getColumns());
            for (int i = 0; i < position; i++) {
                result.data[i] = Arrays.copyOf(data[i], data[i].length);
            }
            result.data[position] = Arrays.copyOf(row, row.length);
            for (int i = position; i < getRows(); i++) {
                result.data[i + 1] = Arrays.copyOf(data[i], data[i].length);
            }
            return result;
        }

        public Matrix getRow(int row) {
            assert row > 0 && row < row;
            Matrix result = new Matrix(1, getColumns());
            for (int i = 0; i < getColumns(); i++) {
                result.setAt(0, i, getAt(row, i));
            }
            return result;
        }

        public Matrix getColumn(int column) {
            assert column < columns;
            Matrix result = new Matrix(getRows(), 1);
            for (int i = 0; i < getRows(); i++) {
                result.setAt(i, 0, getAt(i, column));
            }
            return result;
        }

        public int getRows() {
            return rows;
        }

        public int getColumns() {
            return columns;
        }

        public Matrix multiply(Matrix other) {
            assert columns == other.rows;
            int rows = this.getRows();
            int columns = other.getColumns();
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    double sum = 0.0;
                    for (int r = 0; r < this.getColumns(); r++) {
                        sum += this.getAt(i, r) * other.getAt(r, j);
                    }
                    result.setAt(i, j, sum);
                }
            }
            return result;
        }

        public Matrix multiply(double number) {
            Matrix result = new Matrix(getRows(), getColumns());
            for (int i = 0; i < getRows(); i++) {
                for (int j = 0; j < getColumns(); j++) {
                    result.setAt(i, j, getAt(i, j) * number);
                }
            }
            return result;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < getRows(); i++) {
                for (int j = 0; j < getColumns(); j++) {
                    sb.append(String.format("%.3f ", getAt(i, j)));
                }
                sb.append("\n");
            }
            return sb.toString();
        }

        public Matrix transpose() {
            double[][] result = new double[columns][rows];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result[j][i] = data[i][j];
                }
            }
            return new Matrix(result);
        }

        public Matrix func(UnaryOperator<Double> f) {
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.data[i][j] = f.apply(data[i][j]);
                }
            }
            return result;
        }

        public Matrix subtract(Matrix other) {
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.data[i][j] = data[i][j] - other.data[i][j];
                }
            }
            return result;
        }

        public Matrix add(Matrix other) {
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.data[i][j] = data[i][j] + other.data[i][j];
                }
            }
            return result;
        }

        public Matrix dot(Matrix other) {
            assert rows == other.rows && columns == other.columns;
            Matrix result = new Matrix(rows, columns);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    result.data[i][j] = data[i][j] * other.data[i][j];
                }
            }
            return result;
        }

        public Matrix minus(Matrix other) {
            Matrix result = new Matrix(rows, columns);
            if (other.columns == 1) {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < columns; j++) {
                        result.data[i][j] = data[i][j] - other.data[i][0];
                    }
                }
            } else if (other.rows == 1) {
                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < columns; j++) {
                        result.data[i][j] = data[i][j] - other.data[0][j];
                    }
                }
            } else if (rows == other.rows && columns == other.columns) {
                result = subtract(other);
            } else {
                System.out.println("error in minus()");
            }
            return result;
        }

        public Matrix addColumn(double value, int position) {
            Matrix result = new Matrix(rows, columns + 1);
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < position; j++) {
                    result.data[i][j] = data[i][j];
                }
                result.data[i][position] = value;
                for (int j = position; j < columns; j++) {
                    result.data[i][j + 1] = data[i][j];
                }
            }
            return result;
        }

        public Matrix getMatrixPart(int startRow, int endRow) {
            assert startRow < endRow && startRow < rows && endRow < rows;
            Matrix result = new Matrix(endRow - startRow, columns);
            for (int i = 0; i < result.rows; i++) {
                result.data[i] = Arrays.copyOf(data[startRow + i], data[startRow + i].length);
            }
            return result;
        }

        public static void main(String[] args) {
            double[][] data = {
                    {1,2,3,4},
                    {5,6,7,8},
                    {9,0,1,2}
            };
            double[][] ones = {{1},{1},{1},{1}};
            double[][] data2 = {
                    {1,2,3,4},
                    {5,6,7,8},
                    {9,0,1,2},
                    {3,4,5,6}
            };
            Matrix m2 = new Matrix(data2);
            System.out.println(m2.getMatrixPart(1,3));
            Matrix m = new Matrix(data);
            System.out.println(m.toString());
            System.out.println(m.addColumn(999.0, 0));
            Matrix o = new Matrix(ones);
            System.out.println(m.multiply(o).toString());
            System.out.println(m.addRow(new double[]{1, 2, 3, 4}));
            Matrix p = getMatrix(10, 20, 1);
            System.out.println(p);
            p = getMatrix(1, 5, 1);
            System.out.println(p);
            p = getMatrix(5, 1, 1);
            System.out.println(p);
            /*Matrix n = new Matrix(data2);
            System.out.println(n.toString());
            System.out.println(m.multiply(n).toString());
            System.out.println(m.multiply(2));
            System.out.println(n.multiply(0));*/
        }
    }
  learner_created: true
- name: src/recognition/NumberRecognition.java
  visible: true
  text: |
    package recognition;

    public class NumberRecognition {
        final static Neuron[][] idealOutputNeurons = getNeurons(new int[][]{
                {1,0,0,0,0, 0,0,0,0,0},
                {0,1,0,0,0, 0,0,0,0,0},
                {0,0,1,0,0, 0,0,0,0,0},
                {0,0,0,1,0, 0,0,0,0,0},
                {0,0,0,0,1, 0,0,0,0,0},
                {0,0,0,0,0, 1,0,0,0,0},
                {0,0,0,0,0, 0,1,0,0,0},
                {0,0,0,0,0, 0,0,1,0,0},
                {0,0,0,0,0, 0,0,0,1,0},
                {0,0,0,0,0, 0,0,0,0,1},
        });
        final static Neuron[][] idealInputNeurons = getNeurons(new int[][]{
                {       1, 1, 1,
                        1, 0, 1,
                        1, 0, 1,
                        1, 0, 1,
                        1, 1, 1 },
                {       0, 1, 0,
                        0, 1, 0,
                        0, 1, 0,
                        0, 1, 0,
                        0, 1, 0 },
                {       1, 1, 1,
                        0, 0, 1,
                        1, 1, 1,
                        1, 0, 0,
                        1, 1, 1 },
                {       1, 1, 1,
                        0, 0, 1,
                        1, 1, 1,
                        0, 0, 1,
                        1, 1, 1 },
                {       1, 0, 1,
                        1, 0, 1,
                        1, 1, 1,
                        0, 0, 1,
                        0, 0, 1 },
                {       1, 1, 1,
                        1, 0, 0,
                        1, 1, 1,
                        0, 0, 1,
                        1, 1, 1 },
                {       1, 1, 1,
                        1, 0, 0,
                        1, 1, 1,
                        1, 0, 1,
                        1, 1, 1 },
                {       1, 1, 1,
                        0, 0, 1,
                        0, 0, 1,
                        0, 0, 1,
                        0, 0, 1 },
                {       1, 1, 1,
                        1, 0, 1,
                        1, 1, 1,
                        1, 0, 1,
                        1, 1, 1 },
                {       1, 1, 1,
                        1, 0, 1,
                        1, 1, 1,
                        0, 0, 1,
                        1, 1, 1 }});

        final static Matrix idealInputs = getMatrix(idealInputNeurons);
        final static Matrix idealOutputs = getMatrix(idealOutputNeurons);

        private static Matrix getMatrix(Neuron[][] neurons) {
            Matrix result = new Matrix(neurons.length, neurons[0].length);
            for (int i = 0; i < neurons.length; i++) {
                for (int j = 0; j < neurons[i].length; j++) {
                    result.setAt(i, j, neurons[i][j].value);
                }
            }
            return result;
        }

        private static Neuron[][] getNeurons(int[][] grid) {
            Neuron[][] result = new Neuron[grid.length][];
            for (int i = 0; i < grid.length; i++) {
                result[i] = new Neuron[grid[i].length];
                for (int j = 0; j < grid[i].length; j++) {
                    result[i][j] = new Neuron(grid[i][j]);
                }
            }
            return result;
        }
    }
  learner_created: true
- name: src/recognition/Sigmoid.java
  visible: true
  learner_created: true
- name: src/recognition/Neuron.java
  visible: true
  text: |
    package recognition;

    public class Neuron {
        double value;

        public Neuron(double value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return String.format("%.3f", value);
        }
    }
  learner_created: true
- name: src/recognition/NeuralNetwork.java
  visible: true
  text: |
    package recognition;

    import java.io.*;
    import java.util.Random;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class NeuralNetwork implements Serializable {
        private static final long serialVersionUID = 1L;
        static Logger logger = Logger.getLogger("NeuralNetwork");

        private double[][] weights;

        private void showArray(double[][] array, String message) {
            System.out.println(message);
            for (double[] doubles : array) {
                if (doubles == null) {
                    return;
                }
                for (double aDouble : doubles) {
                    System.out.printf("%.3f ", aDouble);
                }
                System.out.println();
            }
        }

        private void showNeurons(Neuron[] neurons, String message) {
            System.out.print(message);
            for (Neuron neuron : neurons) {
                if (neuron == null) {
                    return;
                }
                System.out.printf("%.2f ", neuron.value);
            }
            System.out.println();
        }

        private void showNeurons(Neuron[][] neurons, String message) {
            System.out.print(message);
            for (Neuron[] neuron : neurons) {
                for (Neuron n : neuron) {
                    if (neuron == null) {
                        return;
                    }
                    System.out.printf("%.2f ", n.value);
                }
                System.out.println();
            }
        }

        public Neuron[] guess(Neuron[] input) {
            return guess(input, weights);
        }

        private Neuron[] guess(Neuron[] input, double[][] weights) {
    //        showNeurons(input, "input: ");
            Neuron[] output = new Neuron[weights.length];
            for (int i = 0; i < output.length; i++) {
                output[i] = new Neuron(0.0);
                assert input.length == (weights[i].length - 1);
                for (int j = 0; j < input.length; j++) {
                    output[i].value += input[j].value * weights[i][j];
    //                System.out.printf("%.2f*%.2f+",weights[i][j], input[j].value);
                }
                output[i].value += weights[i][input.length];
    //            System.out.printf("%.2f*1=%.2f\n",weights[i][input.length], output[i].value);
                output[i].value = 1.0 / (1.0 + Math.exp(-output[i].value));
    //            output[i].value = Math.floor(output[i].value * 100d) / 100d;
            }
            return output;
        }

        public void learn(Neuron[][] idealInput, Neuron[][] idealOutput) {
            double[] myGaussian = {
                    0.21,  0.32, -0.92, 0.03,
                   -0.34, -0.21,  0.93, 0.49,
                    0.31,  0.01, -0.79, 0.61,
                    0.73, -0.47, -0.44, 0.39};

            double[][] weights = new double[idealInput.length][];
            Random random = new Random();
            for (int i = 0; i < weights.length; i++) {
                weights[i] = new double[idealInput[i].length + 1]; // plus bias
                for (int j = 0; j < weights[i].length; j++) {
    //                weights[i][j] = random.nextGaussian();
                    weights[i][j] = myGaussian[j];
                }
            }
            showArray(weights, "initial weights:");

            boolean enough = false;
            int generation = 0;
            while (!enough) {

    //            showArray(weights, "initial weights:");
                Neuron[][] output = new Neuron[idealInput.length][];
                for (int i = 0; i < idealInput.length; i++) {
                    output[i] = guess(idealInput[i], weights);
                }
    //            for (int i = 0; i < output.length; i++) {
    //                showNeurons(output[i], "Neurons for " + i + ": ");
    //            }

                double averageMean = 0.0;
                // Для каждого выходного нейрона oi считамем dW
                for (int i = 0; i < output.length; i++) {
                    // Для oi идеальная цифра - i
                    // Δw (aj, oi) = η ∗ aj ∗ (oi ideal - oi)
                    for (int j = 0; j < idealInput[0].length; j++) {
                        double dWmean = 0.0;
    //                    System.out.printf("for neuron o%d, for a%d\n", i, j);
                        for (int inpNum = 0; inpNum < idealInput.length; inpNum++) {
                            double element = 0.5 * idealInput[inpNum][j].value * (idealOutput[inpNum][i].value - output[inpNum][i].value);
    //                        System.out.printf("Δw (a%d, o%d) = η ∗ a%d ∗ (o%d ideal - o%d) = %.3f\n", j, i, j, i, i, element);
                            dWmean += element;
                        }
                        dWmean /= idealInput.length;
    //                    System.out.printf("Δwmean(a%d, o%d) = %.3f\n", j, i, dWmean);
                        weights[i][j] += dWmean;
                        averageMean += Math.abs(dWmean);
                    }
                }
    /*
                double averageMean = 0.0;
                for (int i = 0; i < output.length; i++) { // i = [0..9]
                    double[][] dW = new double[output[i].length][];
                    for (int j = 0; j < dW.length; j++) { // j = [0..9]
                        dW[j] = new double[idealInput[j].length];
                        for (int k = 0; k < dW[j].length; k++) { // k = [0..15)
    //                        dW[j][k] = 0.5 * idealInput[j][k].value * (idealOutput[i][j].value - output[i][j].value);
                            dW[j][k] = 0.5 * idealInput[j][k].value * (idealInput[i][k].value - output[i][j].value);
                        }
                    }
                    showArray(dW, "dW for " + i + ": ");
    //                System.out.print("Mean values:");
                    double[] mean = new double[dW[0].length];
                    for (int j = 0; j < dW[0].length; j++) {
                        for (int k = 0; k < dW.length; k++) {
                            mean[j] += dW[k][j];
                        }
                        mean[j] = mean[j] / dW.length;
    //                    System.out.printf(" %.2f", mean[j]);
                    }
    //                System.out.println("");
                    // update weight
                    for (int j = 0; j < mean.length; j++) {
    //                    weights[i][j] += mean[j];
                        averageMean += Math.abs(mean[j]);
                    }
    //                showArray(weights, "weights updated after " + i);
                }
                */
                if (averageMean < 0.001) {
                    enough = true;
                }
                generation++;
                if (generation % 100000 == 0) {
                    System.out.printf("gen: %d, averageMean = %.5f\n", generation, averageMean);
                    showArray(weights, "weights: ");
                    showNeurons(output, "neurons: ");
                }
            }
            showArray(weights, "end weights: ");
            this.weights = weights;
    /*
            double[][] output = new double[ideal.length][];
            double[][][] dW = new double[ideal.length][][];
            double[][] meanDW = new double[ideal.length][];
            for (int i = 0; i < output.length; i++) {
                output[i] = new double[ideal.length];
                dW[i] = new double[ideal.length][];
                meanDW[i] = new double[weights[i].length - 1];
                System.out.println("o" + i);
                for (int j = 0; j < output[i].length; j++) {
                    for (int k = 0; k < weights[j].length - 1; k++) {
                        output[i][j] += weights[j][k] * ideal[j][k].value;
                        System.out.print(weights[j][k] + "*" + ideal[j][k].value + " + ");
                    }
                    // plus bias
                    output[i][j] += weights[j][weights[j].length - 1];
                    System.out.print(weights[j][weights[j].length - 1] + "*1=" + output[i][j]);
                    System.out.print(", S(" + output[i][j]);
                    output[i][j] = 1.0 / (1 + Math.exp(-output[i][j]));
                    System.out.println(")=" + output[i][j]);

                    dW[i][j] = new double[weights[j].length - 1];
                    for (int k = 0; k < dW[i][j].length; k++) {
                        dW[i][j][k] = 0.5 * ideal[j][k].value * (ideal[i][k].value - output[i][j]);
    //                    System.out.println("dW(" + j + "," + k + "o" + i + ")="
    //                            + ideal[j][k].value + "*(" + ideal[i][k].value + "-" + output[i][j] + ")="
    //                            + dW[i][j][k]);
                        meanDW[i][k] += dW[i][j][k];
                    }
                }
                showArray(dW[i], ("dW[" + i + "]"));
                showArray(meanDW, ("meanDW[" + i + "]"));
                for (int j = 0; j < meanDW[i].length; j++) {
                    meanDW[i][j] /= meanDW.length;
                }
                showArray(meanDW, ("meanDW[" + i + "] averaged"));
            }
            showArray(output, "output");*/
        }

        public double[][] getWeights() {
            return weights;
        }

        public void serialize(String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(this);
            oos.close();
        }

        public void deserialize(String fileName) throws IOException, ClassNotFoundException {
            logger.log(Level.INFO, "deserialize from file: " + fileName);
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            NeuralNetwork nn = (NeuralNetwork) ois.readObject();
            weights = nn.weights;
            ois.close();
        }

        public Neuron[] guess(int[] grid) {
            Neuron[] input = new Neuron[grid.length];
            for (int i = 0; i < input.length; i++) {
                input[i] = new Neuron(grid[i]);
            }
            return guess(input);
        }
    }
  learner_created: true
- name: src/recognition/NeuralLayer.java
  visible: true
  text: |
    package recognition;

    import java.io.Serializable;

    public class NeuralLayer implements Serializable {
    //    Neuron[] neurons;
        transient NetworkFunction networkFunction;
        Matrix weight;
        transient Matrix delta;
        transient Matrix A;
        transient Matrix dZ;
        transient Matrix error;

        NeuralLayer(int sizeInput, int numberOfNeurons, NetworkFunction networkFunction) {
    //        neurons = new Neuron[numberOfNeurons];
            this.networkFunction = networkFunction;
            weight = new Matrix(sizeInput, numberOfNeurons);
            Matrix.fillRandom(weight);
        }

        @Override
        public String toString() {
            String sb = "weight={" + weight.toString() + "}\n" +
                    "delta={" + (delta == null ? "null" : delta.toString()) + "}\n" +
                    "A={" + (A == null ? "null" : A.toString()) + "}\n" +
                    "dZ={" + (dZ == null ? "null" : dZ.toString()) + "}\n";
            return sb;
        }

        Matrix forward(Matrix x) {
    //        System.out.println("weight:\n" + weight);
    //        System.out.println("x:\n" + x);
            Matrix z = x.multiply(weight);
    //        System.out.println("z:\n" + z);
            A = z.func(networkFunction.function);
    //        System.out.println("A:\n" + A);
            dZ = z.func(networkFunction.derivative);
    //        System.out.println("dZ:\n" + dZ);
            return A;
        }

        Matrix backward(Matrix y, NeuralLayer right) {
            // if output layer
            if (right == null) {
    //            System.out.println("A:\n" + A);
    //            System.out.println("y:\n" + y);
                error = A.minus(y);
    //            System.out.println("error:\n" + error);
    //            System.out.println("dZ:\n" + dZ);
                delta = error.dot(dZ);
    //            System.out.println("delta:\n" + delta);
            } else {
    //            System.out.println("right.delta:\n" + right.delta);
    //            System.out.println("right.weight.transpose():\n" + right.weight.transpose());
    //            System.out.println("dZ:\n" + dZ);
                delta = right.delta.multiply(right.weight.transpose()).dot(dZ);
            }
            return delta;
        }

        double update(double learningRate, Matrix leftA) {
    //        System.out.println("leftA:\n" + leftA);
    //        System.out.println("delta:\n" + delta);
            Matrix ad = leftA.transpose().multiply(delta);
    //        System.out.println("ad:\n" + ad);
    //        System.out.println("ad.multiply(learningRate):\n" + ad.multiply(learningRate));
    //        System.out.println("weight before update:\n" + weight);
            weight = weight.subtract(ad.multiply(learningRate));
    //        System.out.println("weight after update:\n" + weight);
            double res = 0.0;
            for (int i = 0; i < ad.getRows(); i++) {
                for (int j = 0; j < ad.getColumns(); j++) {
                    res += Math.abs(ad.getAt(i, j));
                }
            }
            return res;
        }



    //    public Matrix guess(Matrix weights, Matrix input) {
    //        // weights No x Ni
    //        // input Ni x 1
    //        // result No x 1
    //        // add bias to input
    //        input = input.addRow(new double[]{1.0});
    //        Matrix result = weights.multiply(input);
    //        for (int i = 0; i < result.getRows(); i++) {
    //            neurons[i] = new Neuron(result.getAt(i, 0));
    //        }
    //        return result.func(networkFunction::function);
    //    }
    //
    //    public Matrix partialDerivative() {
    //        Matrix result = new Matrix(1, neurons.length);
    //        for (int i = 0; i < neurons.length; i++) {
    //            result.setAt(0, i, neurons[i].value);
    //        }
    //        return result.func(networkFunction::derivative);
    //    }
    //
    //    public Matrix getOutput() {
    //        Matrix result = new Matrix(1, neurons.length + 1);
    //        for (int i = 0; i < neurons.length; i++) {
    //            result.setAt(0, i, neurons[i].value);
    //        }
    //        result.setAt(0, neurons.length, 1.0); // bias output = 1
    //        return result;
    //    }
    //
    //    public Matrix getResult() {
    //        Matrix result = new Matrix(1, neurons.length + 1);
    //        for (int i = 0; i < neurons.length; i++) {
    //            result.setAt(0, i, neurons[i].value);
    //        }
    //        result = result.func(networkFunction::function);
    //        result.setAt(0, neurons.length, 1.0); // bias output = 1
    //        return result;
    //    }

        public static void main(String[] args) {
            NeuralLayer nl = new NeuralLayer(3, 4, new Sigmoid());
            NeuralLayer nlRight = new NeuralLayer(4, 5, new Sigmoid());
            Matrix x = new Matrix(new double[][]{{1, 2, 3}});
            System.out.println("first layer");
            Matrix res = nl.forward(x);
            System.out.println("res:\n" + res);
            System.out.println("second layer");
            res = nlRight.forward(res);
            Matrix y = new Matrix(new double[][]{{1, 0, 0, 1, 0}});
            Matrix delta = nlRight.backward(y, null);
            System.out.println("inner layer");
            delta = nl.backward(y, nlRight);
            System.out.println("update");
            nl.update(0.5, x);
            x = nl.A;
            nlRight.update(0.5, x);
        }
    }
  learner_created: true
- name: src/recognition/NetworkFunction.java
  visible: true
  text: |+
    package recognition;

    import java.util.function.UnaryOperator;

    public abstract class NetworkFunction {
        public UnaryOperator<Double> function = null;
        public UnaryOperator<Double> derivative = null;

        public double function(double param) {
            return function.apply(param);
        }

        public double derivative(double param) {
            return derivative.apply(param);
        }
    }

  learner_created: true
- name: src/recognition/MultiLayerNeuralNetwork.java
  visible: true
  text: |
    package recognition;

    import java.io.*;
    import java.util.Random;
    import java.util.logging.Level;
    import java.util.logging.Logger;

    public class MultiLayerNeuralNetwork implements Serializable {
        private static final long serialVersionUID = 1L;
        static Logger logger = Logger.getLogger("MultiLayerNeuralNetwork");

        NeuralLayer[] layers;
        transient NetworkFunction networkFunction;
    //    Matrix[] weights;

        /**
         * @param layersDesc - [0] - size of input
         *                     [1..n-2] - sizes of inner layers
         *                     [n-1] - size of output layer
         */
        MultiLayerNeuralNetwork(int[] layersDesc) {
            networkFunction = new Sigmoid();
            layers = new NeuralLayer[layersDesc.length - 1];
    //        weights = new Matrix[layersDesc.length - 1];
            for (int i = 1; i < layersDesc.length - 1; i++) {
    //            // plus bias (size of layer plus one more row in every matrix)
    //            weights[i] = new Matrix(layersDesc[i + 1], layersDesc[i] + 1);
                layers[i - 1] = new NeuralLayer(layersDesc[i - 1] + 1, layersDesc[i] + 1, networkFunction);
            }
            layers[layers.length - 1] = new NeuralLayer(
                    layersDesc[layersDesc.length - 2] + 1,
                    layersDesc[layersDesc.length - 1], networkFunction);
        }

        public void learn(Matrix idealInputs, Matrix idealOutputs, int numberOfEpochs, double learningRate, double maxError) {
            Random random = new Random();
    //        System.out.println("idealInputs:\n" + idealInputs);
            idealInputs = idealInputs.addColumn(1.0, 0);
    //        System.out.println("idealInputs:\n" + idealInputs);
    //        System.out.println("idealOutputs:\n" + idealOutputs);
            double error = 0.0;
            for (int epoch = 0; epoch < numberOfEpochs; epoch++) {
                error = 0.0;
                for (int i = 0; i < idealInputs.getRows(); i++) {
    //            int i = random.nextInt(idealInputs.getRows());
                    Matrix a = idealInputs.getRow(i);
                    guess(a);
    //                System.out.println(a);
    //                System.out.println(idealOutputs.getRow(i));

                    Matrix delta = layers[layers.length - 1].backward(idealOutputs.getRow(i), null);
                    for (int j = layers.length - 2; j >= 0; j--) {
                        delta = layers[j].backward(delta, layers[j + 1]);
                    }

    //                Matrix a = idealInputs.getRow(i);
                    for (NeuralLayer layer : layers) {
                        error += layer.update(learningRate, a);
                        a = layer.A;
                    }
                }
                if (epoch % 100 == 0) {
                    System.out.println("epoch #" + epoch + " error = " + error);
                }
                if (error < maxError) {
                    System.out.println("epoch #" + epoch + " error = " + error);
                    break;
                }
            }
            System.out.println("error: " + error);
        }

        public void learn2(Matrix idealInputs, Matrix idealOutputs, int numberOfEpochs, double learningRate, double maxError) {
            idealInputs = idealInputs.addColumn(1.0, 0);
            final int batchSize = idealInputs.getRows() / 70;
            int batchStart = 0;
            Matrix partInputs = idealInputs.getMatrixPart(batchStart, batchSize);
            Matrix partOutputs = idealOutputs.getMatrixPart(batchStart, batchSize);
            double error = 0.0;
            for (int epoch = 0; epoch < numberOfEpochs; epoch++) {
                error = 0.0;

                guess(partInputs);

                Matrix delta = layers[layers.length - 1].backward(partOutputs, null);
                for (int j = layers.length - 2; j >= 0; j--) {
                    delta = layers[j].backward(delta, layers[j + 1]);
                }

                Matrix a = partInputs;
                for (NeuralLayer layer : layers) {
                    error += layer.update(learningRate, a);
                    a = layer.A;
                }
                if (epoch % 10 == 0) {
                    showInputOutputs(partInputs.getRow(0), partOutputs.getRow(0), layers[layers.length-1].A.getRow(0));
                    System.out.println("epoch #" + epoch + " error = " + error);
                }
                if (error < maxError) {
                    System.out.println("epoch #" + epoch + " error = " + error);
    //                break;
                }
                batchStart += batchSize;
                if (batchStart + batchSize >= idealInputs.getRows()) {
                    batchStart = 0;
                }
                partInputs = idealInputs.getMatrixPart(batchStart, batchStart + batchSize);
                partOutputs = idealOutputs.getMatrixPart(batchStart, batchStart + batchSize);
            }
            System.out.println("error: " + error);
        }

        private void showInputOutputs(Matrix input, Matrix idealOutput, Matrix realOutput) {
            System.out.println("input:");
            for (int i = 0; i < input.getColumns(); i++) {
                int num = (int) (input.getAt(0, i) * 9);
                System.out.print(num > 0 ? num : " ");
                if (i % 28 == 0) {
                    System.out.println();
                }
            }
            System.out.println("ideal output:");
            System.out.println(idealOutput);
            System.out.println("real output:");
            System.out.println(realOutput);
        }


        /*    public void learn(Matrix idealInputs, Matrix idealOutputs, boolean randomWeights) {
                if (randomWeights) {
                    setRandomWeights();
                }
        //        for (Matrix weight : weights) {
        //            System.out.println(weight);
        //        }
        //        Matrix results = new Matrix(idealInputs.getRows(), idealOutputs.getRows());
                for (int i = 0; i < idealInputs.getRows(); i++) {
                    Matrix result = guess(idealInputs.getRow(i).transpose());
                    result = result.transpose();
                    for (int j = 0; j < layers.length; j++) {
                        System.out.println(layers[j]);
                    }
                    System.out.println("result:\n" + result);
                    System.out.println("ideal out:\n" + idealOutputs.getRow(i));
                    Matrix errors = idealOutputs.getRow(i).subtract(result);
                    System.out.println("errors:\n" + errors);
                    Matrix sigma = errors.dot(layers[layers.length - 1].partialDerivative());
                    System.out.println("pd:\n" + layers[layers.length - 1].partialDerivative());
                    System.out.println("sigma:\n" + sigma);

                    System.out.println("layers-2 result:\n" + layers[layers.length - 2].getResult());
        //            System.out.println("weights[weights.length - 1]:\n" + weights[weights.length - 1]);
                    Matrix dW = sigma.transpose().multiply(layers[layers.length - 2].getResult());
                    System.out.println("dW:\n" + dW);

        /*            System.out.println("errors:\n" + errors);
                    errors = errors.func(x -> x * x / 2);
                    System.out.println("squared errors:\n" + errors);
                    Matrix totalErrors = errors.multiply(Matrix.getMatrix(errors.getColumns(), 1, 1));
                    System.out.println("total errors:\n" + totalErrors);
                    Matrix pdErrorsToOut = result.subtract(idealOutputs.getRow(i));
                    System.out.println("pdErrorsToOut:\n" + pdErrorsToOut);
                    Matrix pdResult = result.func(networkFunction::derivative);
                    System.out.println("pdResult:\n" + pdResult);
                    Matrix pdWeight = layers[layers.length - 2].getOutput();
                    System.out.println("pdWeight:\n" + pdWeight);
                    Matrix outputDeltas = pdErrorsToOut
                            .dot(pdResult).transpose()
                            .multiply(pdWeight);
                    System.out.println("output deltas:\n" + outputDeltas);
                    System.out.println("weights[weights.length - 1]:\n" + weights[weights.length - 1]);
                    Matrix wDelta = outputDeltas.multiply(0.5);
                    System.out.println("wDelta:\n" + wDelta);
                    Matrix newWeights = weights[weights.length - 1].subtract(wDelta);
                    System.out.println("newWeights:\n" + newWeights);

                    Matrix dEo = pdErrorsToOut.transpose().multiply(pdResult);
                    System.out.println("dEo:\n" + dEo);
                    System.out.println("weights[weights.length - 1]:\n" + weights[weights.length - 1]);
                    System.out.println(dEo.multiply(weights[weights.length - 1]));
        //            weights[weights.length - 1] = newWeights;
        //            System.out.println("weights:\n" + weights[layers.length-1]);


                }
            }
         */
        public Matrix predict(Matrix input) {
            input = input.addColumn(1.0, 0);
            return guess(input);
        }

        private Matrix guess(Matrix input) {
            for (NeuralLayer layer : layers) {
                input = layer.forward(input);
            }
            return input;
        }

    //    public void setWeights(Matrix[] weights) {
    //        this.weights = weights;
    //    }

    //    private void setRandomWeights() {
    //        Random random = new Random();
    //        for (int i = 0; i < weights.length; i++) {
    //            for (int j = 0; j < weights[i].getRows(); j++) {
    //                for (int k = 0; k < weights[i].getColumns(); k++) {
    //                    weights[i].setAt(j, k, random.nextGaussian());
    //                }
    //            }
    //        }
    //    }

        public void serialize(String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(this);
    //        for (NeuralLayer layer : layers) {
    //            logger.log(Level.INFO, layer.toString());
    //        }
            logger.log(Level.INFO, "serialize to file: " + fileName);
            oos.close();
        }

        public void deserialize(String fileName) throws IOException, ClassNotFoundException {
            logger.log(Level.INFO, "deserialize from file: " + fileName);
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            MultiLayerNeuralNetwork nn = (MultiLayerNeuralNetwork) ois.readObject();
            layers = nn.layers;
            for (int i = 0; i < layers.length; i++) {
                layers[i].networkFunction = networkFunction;
    //            logger.log(Level.INFO, layers[i].toString());
            }
            ois.close();
        }

        public static void main(String[] args) throws IOException, ClassNotFoundException {
            MultiLayerNeuralNetwork neuralNetwork = new MultiLayerNeuralNetwork(new int[]{2, 3, 4, 1});

    //        neuralNetwork.learn(NumberRecognition.idealInputs, NumberRecognition.idealOutputs);

    //        neuralNetwork.deserialize("c:\\temp\\mlnetwork.neu");

            Matrix x = new Matrix(new double[][]{
                    {0, 0}, // 1
                    {1, 0},
                    {0, 1},
                    {1, 1}});
            Matrix y = new Matrix(new double[][]{
                    {0},
                    {1},
                    {1},
                    {0},
            });
            neuralNetwork.learn2(x, y, 20000, 0.1, 0.01);

            for (int i = 0; i < x.getRows(); i++) {
                System.out.println("guess:" + x.getRow(i) + neuralNetwork.predict(x.getRow(i)));
            }
        }
    }
  learner_created: true
- name: weights.neo
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/51/stages/282/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/51/stages/282/implement">JetBrains
    Academy</a>
  time: Mon, 12 Oct 2020 13:19:06 UTC
record: -1
